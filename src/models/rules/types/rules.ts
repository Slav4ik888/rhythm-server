import { ItemBase, ReqDocFields } from '../../base';
import { Position } from '../../users';


/** Как может выглядеть стуктура тела для Rule */
export enum RuleType {
  SIMPLE = 'simple',
  DUTY   = 'duty'
};


/**
 * Базовое "Правило"
 * "Правило"  - обычно небольшой текст, с завершённой по смыслу информацией.
 * "Правилом" - может быть целая обязанность, но если внутри обязанности 
 *              разнообразное количество действий, то рекомендуется делить 
 *              такую обязанность на несколько "Правил"
 * 
 * Одно "Правило" - может включать в себя (необязательно каждый элемент):
 *    КРАТКОЕ ОПИСАНИЕ - суть, о чём речь.
 *    ОЖИДАЕМЫЙ РЕЗУЛЬТАТ - часто это может помочь сориентироваться, является ли 
 *                          этот текст "Правилом" или это "Раздел" (Секция).
 *    ПОСЛЕДОВАТЕЛЬНОСТЬ ДЕЙСТВИЙ
 */
export interface Rule extends ItemBase {

  type : RuleType
  body : string
  
  // TODO: Должность может находится только в 1м списке, сделать Check если есть то 
  // вначале нужно удалить должность из другого списка

  // TODO: При сохранении вначале сохраняется в LocalStorage, затем на сервер, при успешном
  // сохранении, удалять из LS


  // Ids должностей закреплённых за правилом, кто должен его выполнять.
  //   [+] - уведомления об изменениях
  executors?   : string[]

  // Надзирающих за этим правилом и его применением.
  // Имеют право вносить изменения без ведома вышестоящих
  //  [ +] - уведомления об изменениях
  supervising? : string[]

  // Кто наблюдает, они должны быть в курсе этого правила.
  //  [+] - уведомления об изменениях
  observers?   : string[]

  // Кто может смотреть это правило.
  //  [-] - уведомления об изменениях
  watchers?    : string[]

  // Кому нельзя видеть это правило.
  //  [-] - к ним не поступают уведомления об изменениях
  unwatchers?  : string[]

  // TESTING
  // questions? : Strings // Ids questions
}

// For request - required fields
export type PartialRule = ReqDocFields & Partial<Rule>
